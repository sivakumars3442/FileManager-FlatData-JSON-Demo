@page "/"

@using Syncfusion.Blazor.FileManager
@using FileManager.Data
@using Microsoft.AspNetCore.Mvc
@inject PhysicalFileProvider PhysicalFileProvider
@inject FileService FileService
<SfFileManager TValue="CustomFileManagerDirectoryContent">
    <FileManagerUploadSettings DirectoryUpload=false></FileManagerUploadSettings>
    <FileManagerEvents TValue="CustomFileManagerDirectoryContent" OnRead="OnRead" ItemsDeleting="ItemsDeleting" FolderCreating="FolderCreating" Searching="Searching" ItemRenaming="ItemRenaming" ItemsCopying="ItemsCopying" ItemsMoving="ItemsMoving" BeforeImageLoad="BeforeImageLoad" BeforeDownload="BeforeDownload"></FileManagerEvents>
</SfFileManager>
@code{
    public class CustomFileManagerDirectoryContent : FileManagerDirectoryContent
    {
        public Stream StreamData {get; internal set; }
    }
    public static List<CustomFileManagerDirectoryContent> Data { get; set; } = new List<CustomFileManagerDirectoryContent>();

    protected override void OnInitialized()
    {
        Data = PhysicalFileProvider.GetData();
    }

    public async Task OnRead(ReadEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Read(args.Path, Data, args.Files);
    }

    public async Task ItemsDeleting(ItemsDeletingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Delete(args.Path, Data, args.Files);
    }

    public async Task FolderCreating(FolderCreatingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Create(args.Path, args.CreatedFolderName, Data, args.Files);
    }

    public async Task Searching(SearchingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Search(args.Path, args.SearchText, Data, args.Files);
    }

    public async Task ItemRenaming(ItemRenamingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Rename(args.Path, args.NewName, Data, args.Files);
    }

    public async Task ItemsCopying(ItemsCopyingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Copy(args.Path, args.TargetData as CustomFileManagerDirectoryContent, Data, args.Files);
    }

    public async Task ItemsMoving(ItemsMovingEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.Response = await FileService.Move(args.Path, args.TargetData as CustomFileManagerDirectoryContent, Data, args.Files);
    }

    public void BeforeImageLoad(BeforeImageLoadEventArgs<CustomFileManagerDirectoryContent> args)
    {
        args.FileDetails.StreamData.Position = 0;
        args.FileStream = args.FileDetails.StreamData;
    }

    public void BeforeDownload(BeforeDownloadEventArgs<CustomFileManagerDirectoryContent> args)
    {
        var downloadData = FileService.GetExampleStream();
        args.FileStream = args.DownloadData.DownloadFileDetails[0].StreamData;
        args.DownloadFileName = args.DownloadData.DownloadFileDetails[0].IsFile ? args.DownloadData.DownloadFileDetails[0].Name : args.DownloadData.DownloadFileDetails[0].Name +".zip";
    }
}





